TOKENS        Lexemes

KEYWORD     = float
IDENTIFIER  = a
SEPARATOR   = ;
KEYWORD     = float
IDENTIFIER  = b
SEPARATOR   = ;
KEYWORD     = float
IDENTIFIER  = c
SEPARATOR   = ;
KEYWORD     = float
IDENTIFIER  = all
SEPARATOR   = [
INTEGER     = 3
SEPARATOR   = ]
SEPARATOR   = ;
KEYWORD     = float
IDENTIFIER  = not_used
SEPARATOR   = [
INTEGER     = 3
SEPARATOR   = :
INTEGER     = 6
SEPARATOR   = ]
SEPARATOR   = ;
KEYWORD     = for
SEPARATOR   = (
KEYWORD     = int
IDENTIFIER  = i
OPERATOR    = =
INTEGER     = 0
SEPARATOR   = ;
IDENTIFIER  = i
OPERATOR    = <
INTEGER     = 3
SEPARATOR   = ;
IDENTIFIER  = i
OPERATOR    = =
IDENTIFIER  = i
OPERATOR    = +
INTEGER     = 1
SEPARATOR   = )
KEYWORD     = STDinput
IDENTIFIER  = x
SEPARATOR   = ;
IDENTIFIER  = f
SEPARATOR   = [
IDENTIFIER  = i
SEPARATOR   = ]
OPERATOR    = =
IDENTIFIER  = x
SEPARATOR   = ;
KEYWORD     = if
SEPARATOR   = (
IDENTIFIER  = i
OPERATOR    = =
OPERATOR    = =
INTEGER     = 0
SEPARATOR   = )
KEYWORD     = then
IDENTIFIER  = a
OPERATOR    = =
IDENTIFIER  = x
SEPARATOR   = ;
KEYWORD     = else
KEYWORD     = if
SEPARATOR   = (
IDENTIFIER  = i
OPERATOR    = =
OPERATOR    = =
INTEGER     = 1
SEPARATOR   = )
KEYWORD     = then
IDENTIFIER  = b
OPERATOR    = =
IDENTIFIER  = x
SEPARATOR   = ;
KEYWORD     = else
IDENTIFIER  = c
OPERATOR    = =
IDENTIFIER  = x
SEPARATOR   = ;
KEYWORD     = endelse
KEYWORD     = endfor
KEYWORD     = float
IDENTIFIER  = before_square_root$
OPERATOR    = =
OPERATOR    = -
IDENTIFIER  = b
OPERATOR    = *
INTEGER     = 4
OPERATOR    = *
IDENTIFIER  = a
OPERATOR    = *
IDENTIFIER  = c
KEYWORD     = bool
IDENTIFIER  = one_root
KEYWORD     = bool
IDENTIFIER  = two_roots
KEYWORD     = bool
IDENTIFIER  = no_roots
KEYWORD     = if
SEPARATOR   = (
IDENTIFIER  = before_square_root$
OPERATOR    = <
INTEGER     = 0
SEPARATOR   = )
KEYWORD     = then
KEYWORD     = STDoutput
IDENTIFIER  = one_root
OPERATOR    = =
KEYWORD     = False
IDENTIFIER  = two_roots
OPERATOR    = =
KEYWORD     = False
IDENTIFIER  = no_roots
OPERATOR    = =
KEYWORD     = True
KEYWORD     = endif
KEYWORD     = if
SEPARATOR   = (
IDENTIFIER  = before_square_root$
OPERATOR    = =
INTEGER     = 0
SEPARATOR   = )
KEYWORD     = then
KEYWORD     = STDoutput
IDENTIFIER  = one_root
OPERATOR    = =
KEYWORD     = True
IDENTIFIER  = two_root
OPERATOR    = =
KEYWORD     = False
IDENTIFIER  = no_roots
OPERATOR    = =
KEYWORD     = False
KEYWORD     = endif
KEYWORD     = if
SEPARATOR   = (
IDENTIFIER  = before_square_root$
OPERATOR    = >
INTEGER     = 0
SEPARATOR   = )
SEPARATOR   = {
KEYWORD     = STDoutput
IDENTIFIER  = one_root
OPERATOR    = =
KEYWORD     = False
IDENTIFIER  = two_roots
OPERATOR    = =
KEYWORD     = True
IDENTIFIER  = no_roots
OPERATOR    = =
KEYWORD     = False
SEPARATOR   = }
KEYWORD     = int
IDENTIFIER  = a$
OPERATOR    = =
IDENTIFIER  = a
SEPARATOR   = ;
KEYWORD     = int
IDENTIFIER  = b$
OPERATOR    = =
IDENTIFIER  = b
SEPARATOR   = ;
KEYWORD     = int
IDENTIFIER  = c$
OPERATOR    = =
IDENTIFIER  = c
SEPARATOR   = ;
KEYWORD     = int
IDENTIFIER  = modulus
OPERATOR    = =
IDENTIFIER  = a
OPERATOR    = %
IDENTIFIER  = b
OPERATOR    = +
IDENTIFIER  = b
OPERATOR    = %
IDENTIFIER  = c
SEPARATOR   = ;
KEYWORD     = float
IDENTIFIER  = total
OPERATOR    = =
INTEGER     = 0
KEYWORD     = while
SEPARATOR   = (
KEYWORD     = not
IDENTIFIER  = one_root
KEYWORD     = or
IDENTIFIER  = two_roots
SEPARATOR   = )
KEYWORD     = do
IDENTIFIER  = total
OPERATOR    = =
IDENTIFIER  = total
OPERATOR    = +
IDENTIFIER  = a
OPERATOR    = +
IDENTIFIER  = b
OPERATOR    = +
IDENTIFIER  = c
KEYWORD     = enddo
SEPARATOR   = (
IDENTIFIER  = two_roots
KEYWORD     = and
IDENTIFIER  = no_roots
SEPARATOR   = )
KEYWORD     = whileend
IDENTIFIER  = send_email
SEPARATOR   = (
IDENTIFIER  = a
SEPARATOR   = ,
IDENTIFIER  = b
SEPARATOR   = ,
IDENTIFIER  = c
SEPARATOR   = )